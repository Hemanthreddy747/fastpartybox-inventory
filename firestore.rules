rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidString(field) {
      return field is string && field.size() <= 500;
    }
    
    function isValidNumber(field) {
      return field is number && field >= 0 && field <= 999999999;
    }
    
    function isWithinRateLimit() {
      let requestsPath = /databases/$(database)/documents/users/$(request.auth.uid)/requests;
      let recentRequests = getAfter(requestsPath);
      let timeWindow = duration.value(5, 'minutes');
      
      return recentRequests.data.count <= 100 &&
             recentRequests.data.lastRequest + timeWindow > request.time;
    }
    
    function isWithinQuota(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      let tier = userDoc.data.subscriptionTier;
      let tierLimits = {
        'FREE': 100,
        'PAID': 1000,
        'ENTERPRISE': 10000
      };
      let productCount = userDoc.data.productCount;
      
      return productCount < tierLimits[tier];
    }

    function isSubscriptionActive(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      let expiryDate = userDoc.data.subscriptionExpiry;
      return expiryDate > request.time;
    }

    function isValidProduct(product) {
      return product.size() <= 13 
        && product.productName is string 
        && product.productName.size() <= 100
        && product.productName.size() > 0
        && (product.productDesc == null || product.productDesc is string)
        && (product.brand == null || product.brand is string)
        && (product.category == null || product.category is string)
        && product.purchasePrice is number 
        && product.purchasePrice >= 0
        && product.mrp is number 
        && product.mrp >= product.purchasePrice
        && product.retailPrice is number 
        && product.retailPrice >= 0
        && product.retailPrice <= product.mrp
        && product.wholesalePrice is number 
        && product.wholesalePrice >= 0
        && product.wholesalePrice <= product.mrp
        && product.wholesalePrice <= product.retailPrice
        && product.stockQty is number 
        && product.stockQty >= 0
        && product.stockQty == product.stockQty.round()
        && product.minStock is number 
        && product.minStock >= 0
        && product.minStock <= product.stockQty
        && product.minStock == product.minStock.round()
        && (product.offerValue == null || 
            (product.offerValue is string && product.offerValue.size() <= 50))
        && (product.rank == null || 
            (product.rank is number && product.rank == product.rank.round()));
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && isValidString(request.resource.data.displayName)
        && isValidString(request.resource.data.email);
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && isWithinRateLimit();
      
      match /products/{productId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() 
          && isOwner(userId)
          && isValidProduct(request.resource.data)
          && isWithinQuota(userId);
        allow update: if isAuthenticated() 
          && isOwner(userId)
          && isValidProduct(request.resource.data)
          && isWithinRateLimit();
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      
      match /orders/{orderId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow write: if isAuthenticated() 
          && isOwner(userId)
          && isSubscriptionActive(userId)
          && isValidNumber(request.resource.data.total);
      }
      
      match /requests/{requestId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }
  }
}
